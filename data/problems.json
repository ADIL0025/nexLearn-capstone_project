{ 
    "problems": [
        {
            "id": 1,
            "title": "Contains Duplicate",
            "boilerplate": {
                "java": "public class Solution {\n\tpublic boolean containsDuplicate(int[] nums) {\n\t\t// Write your code here\n\t}\n}",
                "cpp": "bool containsDuplicate(vector<int>& nums) {\n\t// Write your code here\n}",
                "python": "def containsDuplicate(nums):\n\t# Write your code here",
                "javascript": "function containsDuplicate(nums) {\n\t// Write your code here\n}"
            },
            "solution": {
                "java": "public class Solution { public boolean containsDuplicate(int[] nums) { Set<Integer> set = new HashSet<>(); for (int num : nums) { if (!set.add(num)) return true; } return false; } }",
                "cpp": "bool containsDuplicate(vector<int>& nums) { unordered_set<int> s; for (int num : nums) { if (s.count(num)) return true; s.insert(num); } return false; }",
                "python": "def containsDuplicate(nums): return len(nums) != len(set(nums))",
                "javascript": "function containsDuplicate(nums) { return new Set(nums).size !== nums.length; }"
            },
            "testCases": [
              { "input": "[1, 2, 3, 3]", "expectedOutput": "true" },
              { "input": "[1, 2, 3, 4]", "expectedOutput": "false" },
              { "input": "[]", "expectedOutput": "false" },
              { "input": "[-1, -2, -3, -3]", "expectedOutput": "true" }
            ]
        },
        {
            "id": 2,
            "title": "Valid Anagram",
            "boilerplate": {
                "java": "class Solution {\n\tpublic boolean isAnagram(String s, String t) {\n\t\t// Your code here\n\t}\n}",
                "cpp": "class Solution {\npublic:\n\tbool isAnagram(string s, string t) {\n\t\t// Your code here\n\t}\n};",
                "python": "class Solution:\n\tdef isAnagram(self, s: str, t: str) -> bool:\n\t\t# Your code here",
                "javascript": "class Solution {\n\tisAnagram(s, t) {\n\t\t// Your code here\n\t}\n}"
            },
            "solution": {
                "java": "import java.util.Arrays; class Solution { public boolean isAnagram(String s, String t) { if (s.length() != t.length()) return false; char[] sArr = s.toCharArray(); char[] tArr = t.toCharArray(); Arrays.sort(sArr); Arrays.sort(tArr); return Arrays.equals(sArr, tArr); } }",
                "cpp": "#include <algorithm> #include <string> using namespace std; class Solution { public: bool isAnagram(string s, string t) { if (s.length() != t.length()) return false; sort(s.begin(), s.end()); sort(t.begin(), t.end()); return s == t; } };",
                "python": "class Solution: def isAnagram(self, s: str, t: str) -> bool: return sorted(s) == sorted(t)",
                "javascript": "class Solution { isAnagram(s, t) { return s.split('').sort().join('') === t.split('').sort().join(''); } }"
            },
            "testCases": [
                { "input": "[\"anagram\", \"nagaram\"]", "expectedOutput": "true" },
                { "input": "[\"rat\", \"car\"]", "expectedOutput": "false" },
                { "input": "[\"a\", \"a\"]", "expectedOutput": "true" },
                { "input": "[\"abc\", \"cba\"]", "expectedOutput": "true" },
                { "input": "[\"hello\", \"world\"]", "expectedOutput": "false" }
            ]
        }
    ]
  }