generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(uuid())
  name             String?
  email            String             @unique
  password         String
  goal             Goal               @default(PLACEMENT)
  startedCourses   StartedCourse[]
  performances     UserPerformance[]
  materialProgress MaterialProgress[]
  moduleProgress   ModuleProgress[] // Add back-relation for `ModuleProgress`
  recommendations  Recommendations[]
  submissions      Submission[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Course {
  id              String            @id @default(uuid())
  title           String
  description     String?
  type            CourseType
  goal            Goal
  // category       String          // For better discoverability
  // tags           String[]        // Array of tags for filtering and searching
  modules         Module[]
  startedByUsers  StartedCourse[] // Relation for users who started this course
  recommendations Recommendations[] // Back-relation for `Recommendations`
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  isDeleted       Boolean           @default(false) // Soft delete
}

model Module {
  id        String           @id @default(uuid())
  index     Int // Starting from 1 for ordering within a course
  title     String
  courseId  String
  materials Material[]
  Course    Course           @relation(fields: [courseId], references: [id])
  progress  ModuleProgress[] // New relation for user-specific progress

  @@unique([courseId, index])
}

model Material {
  id               String             @id @default(uuid())
  type             MaterialType
  title            String
  videoUrl         String?
  content          String?
  questions        Assessment[]
  moduleId         String
  Module           Module             @relation(fields: [moduleId], references: [id])
  materialProgress MaterialProgress[] // Back-relation for `MaterialProgress`
}

model MaterialProgress {
  id         String   @id @default(uuid())
  userId     String
  materialId String
  progress   Float    @default(0) // User's progress on this material
  completed  Boolean  @default(false)
  User       User     @relation(fields: [userId], references: [id])
  Material   Material @relation(fields: [materialId], references: [id])

  @@unique([userId, materialId])
}

model ModuleProgress {
  id       String @id @default(uuid())
  userId   String
  moduleId String
  progress Float  @default(0) // User's progress on this module
  User     User   @relation(fields: [userId], references: [id])
  Module   Module @relation(fields: [moduleId], references: [id])

  @@unique([userId, moduleId])
}

model StartedCourse {
  id       String @id @default(uuid())
  userId   String
  courseId String
  progress Float  @default(0) // Percentage progress
  User     User   @relation(fields: [userId], references: [id])
  Course   Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId]) // Ensure a user can only start a course once
}

model Recommendations {
  id       String @id @default(uuid())
  userId   String
  courseId String
  User     User   @relation(fields: [userId], references: [id])
  Course   Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
}

model Assessment {
  id         String     @id @default(uuid())
  questions  Question[]
  materialId String
  Material   Material   @relation(fields: [materialId], references: [id])
}

model Question {
  id            String     @id @default(uuid())
  text          String
  optionA       String
  optionB       String
  optionC       String
  optionD       String
  correctAnswer String // "A", "B", "C", "D"
  assessmentId  String
  Assessment    Assessment @relation(fields: [assessmentId], references: [id])
}

model UserPerformance {
  id         String     @id @default(uuid())
  userId     String
  courseType CourseType
  totalScore Int        @default(0) // Total score based on correctness
  correctDSA Int        @default(0) // Number of correct DSA questions
  correctMCQ Int        @default(0) // Number of correct MCQs
  totalDSA   Int        @default(0) // Total DSA questions attempted
  totalMCQ   Int        @default(0) // Total MCQs attempted
  User       User       @relation(fields: [userId], references: [id])
}

// Enums
enum Goal {
  INTERNSHIP
  PLACEMENT
}

enum CourseType {
  CODING
  APTITUDE
  LANGUAGE
}

enum MaterialType {
  VIDEO // Video Lecture
  READING // Reading Content
  ASSESSMENT // Assessments
}

model DSATopic {
  id       String    @id @default(uuid())
  index    Int       @default(autoincrement())
  title    String
  problems Problem[]
}

model Problem {
  id               String       @id @default(uuid())
  topicId          String
  title            String
  difficulty       Difficulty
  problemStatement String
  sampleInput1     String
  sampleOutput1    String
  sampleInput2     String
  sampleOutput2    String
  testCases        TestCase[]
  submission       Submission[]

  DSATopic DSATopic @relation(fields: [topicId], references: [id])
}

model TestCase {
  id        String @id @default(uuid())
  input     String
  expected  String
  problemId String

  problem Problem @relation(fields: [problemId], references: [id])
}

model Submission {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  language  String
  code      String
  status    String
  output    String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  problem Problem @relation(fields: [problemId], references: [id])
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
