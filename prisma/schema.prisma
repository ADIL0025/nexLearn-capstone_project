generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String            @id @default(uuid())
  name           String?
  email          String            @unique
  password       String
  goal           Goal              @default(PLACEMENT)
  startedCourses StartedCourse[]
  performances   UserPerformance[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model Course {
  id             String          @id @default(uuid())
  title          String
  description    String?
  type           CourseType
  goal           Goal
  modules        Module[]
  startedByUsers StartedCourse[] // Relation to StartedCourse
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Module {
  id        String     @id @default(uuid())
  index     Int // Starting from 1 for ordering within a course
  title     String
  courseId  String
  materials Material[]
  Course    Course     @relation(fields: [courseId], references: [id])

  @@unique([courseId, index])
}

model Material {
  id        String       @id @default(uuid())
  type      MaterialType // VIDEO, READING, ASSESSMENT
  title     String
  videoUrl  String? // For Video Lectures
  content   String? // For Reading Content
  questions Assessment[] // For Assessments
  completed Boolean      @default(false)
  moduleId  String
  Module    Module       @relation(fields: [moduleId], references: [id])
}

model Assessment {
  id         String     @id @default(uuid())
  questions  Question[]
  materialId String
  Material   Material   @relation(fields: [materialId], references: [id])
}

model Question {
  id            String     @id @default(uuid())
  text          String
  optionA       String
  optionB       String
  optionC       String
  optionD       String
  correctAnswer String // "A", "B", "C", "D"
  assessmentId  String
  Assessment    Assessment @relation(fields: [assessmentId], references: [id])
}

model StartedCourse {
  id       String @id @default(uuid())
  userId   String
  courseId String
  progress Float  @default(0) // Percentage progress
  User     User   @relation(fields: [userId], references: [id])
  Course   Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId]) // Ensure a user can only start a course once
}

model UserPerformance {
  id         String     @id @default(uuid())
  userId     String
  courseType CourseType
  totalScore Int        @default(0) // Total score based on correctness
  correctDSA Int        @default(0) // Number of correct DSA questions
  correctMCQ Int        @default(0) // Number of correct MCQs
  totalDSA   Int        @default(0) // Total DSA questions attempted
  totalMCQ   Int        @default(0) // Total MCQs attempted
  User       User       @relation(fields: [userId], references: [id])
}

// Enums
enum Goal {
  INTERNSHIP
  PLACEMENT
}

enum CourseType {
  CODING
  APTITUDE
  LANGUAGE
}

enum MaterialType {
  VIDEO // Video Lecture
  READING // Reading Content
  ASSESSMENT // Assessments
}
